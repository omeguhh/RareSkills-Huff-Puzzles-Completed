
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
//get fn selector and jump if its found and revert if not
push0 calldataload 0xe0 shr

__FUNC_SIG(add1) eq add1 jumpi

push0 dup1 revert

add1:
    //take value off top of stack and add add 1
    0x04 calldataload                   //[val]
    dup1 0x01 add                       //[(1+val),val]
    push0 swap1 gt                            //[res(1 or 0),val]
    success jumpi
        //check for overflow
        0x00 0x00 revert
    success:
    0x01 add                            //[sum]
    push0 mstore                        //[]

    //return sum after checking for overflow
    0x20 push0                          //[0,32]
    return

}