/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
push0 calldataload 0xe0 shr

dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
dup1 __FUNC_SIG(withdraw) eq withdraw jumpi

//add receive fn here
caller push0                                    //[offset,msg.sender]
mstore                                          //[]

push0 sload                                     //[slot[0]]
0x20 mstore                                     //[]

0x40 push0 sha3                                 //[key(userDep[msg.sender])]
dup1 sload                                      //[userDep[caller], key(userDep[caller])]

dup1 dup1 callvalue add                         //[sumNewDep, currDep,currDep, key(currDep)]
lt iszero not_neg jumpi                         //[res,currDep,key(currDep)]
    push0 push0 revert

not_neg:
callvalue add swap1                             //[key(currDep),sumNewDep]
sstore                                          //[]

balanceOf:
    caller push0                                    //[offset,msg.sender]
    mstore                                          //[]

    push0 sload                                     //[slot[0]]
    0x20 mstore                                     //[]

    0x40 push0 sha3                                 //[key(userDep[msg.sender])]
    sload                                           //[val]
    push0 mstore                                    //[]
    0x20 push0 return                               //[]

withdraw:
    //should revert if amt is more than they deposited
    //revert if withdrawl amt is 0 or negative
    //decrement their stored balance before sending eth(reentrancy protection)
    0x04 calldataload dup1                        //[amt,amt]
    push0 lt not_zero_or_negative jumpi           //[res,amt]
        push0 push0 revert
    not_zero_or_negative:
    caller push0                                    //[offset,msg.sender,amt]
    mstore                                          //[amt]

    push0 sload                                     //[slot[0],amt]
    0x20 mstore                                     //[amt]

    0x40 push0 sha3                                 //[key(userDep[msg.sender]),amt]
    dup1
    sload                                           //[balance,key(dep[msg.sender]),amtToWithdraw]

    dup3 dup2 lt iszero validAmt jumpi
        push0 push0 revert
    validAmt:                                       //[balance,key(dep[msg.sender]),amtToWithdraw]
    //now ready to decrement and transfer funds
    dup3 swap1 sub                                  //[(cBal-amt),key(dep[msg.sender]),withdrawAmt]
    //following line decrements balance in contract
    swap1 sstore                                    //[withdrawAmt]

    //now transfer using 'call'
    push0 push0 push0 push0                         //[rSize,aO,argSize,r0,wAmt]
    swap4 caller gas                                //[gas,caller,wAmt,aO,aS,rO,rSize]
    call


}
