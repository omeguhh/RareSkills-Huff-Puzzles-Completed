
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define macro MAIN() = takes(0) returns(0) {
    push0 calldataload 0xe0 shr

    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    dup1 __FUNC_SIG(write) eq write jumpi

    push0 push0 revert

    //dynamic arrays in storage store length at the position of the storage variable
    //to get the the individual items, sha3 the position of the variable 

    /* Notes regarding dynamic array in storage */
    //value type dynamic arrays in storage use the hash of the slot to determine the start
    //of where the data will be stored
    //ie keccack256(slot(0)) + (0 * 32) where 0 is index 0 and 32 is the size (32 bytes)
    //more formally keccack256(slot) + (index * sizeOfType)

    //the length of the array is stored @ the slot -- sload(slot) = length in the case of dynamic
    //arrays.

    popp:
        push0 sload                                         //[arr_length]
        //check array length not zero or revert w error
        dup1 not_zero jumpi                                 //[length]
            __ERROR(ZeroArray)
            push0 mstore
            0x04 push0 revert
        not_zero:
        0x01 swap1 sub                                      //[length--]
        dup1                                                //[length--,length--]
        //following line decrements the length of the array
        push0 sstore                                        //[length--]
        0x20 mul                                            //[len*32]
        0x20 push0 sha3                                     //[hash(slot0),len*32]
        add                                                 //[arr(last_idx)]
        push0 swap1                                         //[hash,0]
        sstore                                              //[]

        0x20 push0 return

    read:
        0x04 calldataload                                   //[idx]
        //checking to make sure length greater than index reading to, else revert out of bounds 
        dup1 push0 sload gt iszero out_of_bounds jumpi      //[idx]
        0x20 mul                                            //[idx*32]
        0x20 push0 sha3                                     //[slotHash, idx*32]
        add                                                 //[hash_to_read]
        sload                                               //[val]
        push0 mstore                                        //[]
        0x20 push0 return                                   //[]


        //moved error outside of the rest of execution because of the issues arrising
        //with the fact that the 'read' function is a staticcall. It was having issue
        //with this error, returning 'state changing in staticcall.'
        out_of_bounds:
        __ERROR(OutOfBounds)
            push0 mstore
            0x04 push0 revert



    length:
        push0 sload                                         //[array_length]
        push0 mstore                                        //[]

        0x20 push0 return                                   //[]

    
    write:
        0x04 calldataload                                   //[index]
        dup1 push0 sload gt in_bounds jumpi                 //[res, idx]
            __ERROR(OutOfBounds)
            push0 mstore
            0x04 push0 revert
        in_bounds:
        0x20 mul                                            //[idx*32]
        0x20 push0 sha3                                     //[hashOfSlot, idx*32]
        add                                                 //[arr_idx_to_change]
        0x24 calldataload swap1                             //[hash[arr(i)], new_val]
        sstore                                              //[]

        0x20 push0 return                                   //[]
    

    pushh:
        0x04 calldataload                                   //[val]
        push0 sload                                         //[length,val]
        dup1 0x01 add                                       //[length++, length, val]
        push0 sstore                                        //[length, val]
        //hash slot

        0x20 mul                                            //[length*32, val] 
        0x20 push0 sha3                                     //[slotHash,length*32,val]
        add                                                 //[key(store_val),val]
        sstore                                              //[]
        0x20 push0 return

    
 }